Part 1:

    Double Quotes:
        >>> spam = "That is Alice's cat"
        >>> spam
        "That is Alice's cat"
    
    Escape Characters:
        >>> spam = 'Say hi to Bob\'s mother.'
        >>> spam
        "Say hi to Bob's mother."

        >>> print("Hello there!\nHow are you?\nI\'m doing fine.")
        Hello there!
        How are you?
        I'm doing fine.

    Raw Strings:
        >>> print(r'That is Carol\'s cat.')
        That is Carol\'s cat.

    Multiline Strings with Triple Quotes:
        C:\Users\cj917\Documents\courses\csc221\hw4\part1> python catnapping.py
        Dear Alice, 

        Eve's cat has been arrested for catnapping, cat
        burglary, and extortion.

        Sincerely,
        Bob

        >>> print('Dear Alice,\n\nEve\'s cat has been arrested for catnapping, 
        cat burglary, and extortion.\n\nSincerely,\nBob')
        Dear Alice,

        Eve's cat has been arrested for catnapping, cat burglary, and extortion.

        Sincerely,
        Bob

    Indexing and Slicing Strings:
        >>> spam = 'Hello, world!'
        >>> spam[0]
        'H'
        >>> spam[-1]
        '!'
        >>> spam[0:5]
        'Hello'
        >>> spam[:5]
        'Hello'
        >>> spam[7:]
        'world!'
        >>> fizz = spam[0:5]
        >>> fizz
        'Hello'
    
    The in and not in Operators with Strings:
        >>> 'Hello' in 'Hello, World'
        True
        >>> 'Hello' in 'Hello'
        True
        >>> 'HELLO' in 'Hello, World'
        False
        >>> ''in 'spam'
        True
        >>> 'cats' not in 'cats and dogs'
        False 

    Putting Strings Inside Other Strings:
        >>> name = 'Carissa'
        >>> age = 20
        >>> 'Hello, my name is ' + name + '. I am ' + str(age) + ' years old.'
        'Hello, my name is Carissa. I am 20 years old.'
        >>> 'My name is %s. I am %s years old.' % (name, age)
        'My name is Carissa. I am 20 years old.'
        >>> f'My name is {name}. Next year I will be {age + 1}.'
        'My name is Carissa. Next year I will be 21.'

    The upper(), lower(), isupper(), and islower() Methods:
        >>> spam = 'Hello, world!'
        >>> spam = spam.upper()
        >>> spam
        'HELLO, WORLD!'
        >>> spam = spam.lower()
        >>> spam
        'hello, world!'

        PS C:\Users\cj917\Documents\courses\csc221\hw4\part1> python how_are_you.py
        How are you?
        fine
        I hope the rest of your day is good.
        PS C:\Users\cj917\Documents\courses\csc221\hw4\part1> python how_are_you.py
        How are you?
        great
        I feel great too.

        >>> spam = 'Hello, world!'
        >>> spam.islower()
        False
        >>> spam.isupper()
        False
        >>> 'HELLO'.isupper()
        True
        >>> 'abc12345'.islower()
        True
        >>> '12345'.islower()
        False
        >>> '12345'.isupper()
        False

        >>> 'Hello'.upper()
        'HELLO'
        >>> 'Hello'.upper().lower()
        'hello'
        >>> 'Hello'.upper().lower().upper()
        'HELLO'
        >>> 'HELLO'.lower()
        'hello'
    
    The isX() methods:
        >>> 'hello'.isalpha()
        True
        >>> 'hello123'.isalpha()
        False
        >>> 'hello123'.isalnum()
        True
        >>> '123'.isdecimal()
        True
        >>> ' '.isspace()
        True
        >>> 'This Is Title Case'.istitle()
        True
        >>> 'This Is not Title Case'.istitle()
        False
        >>> 'This Is NOT Title Case Either'.istitle()
        False

        PS C:\Users\cj917\Documents\courses\csc221\hw4\part1> python validateInput.py
        Enter your age:
        20
        Select a new password(letters and numbers only):
        tr4sh
        PS C:\Users\cj917\Documents\courses\csc221\hw4\part1> python validateInput.py
        Enter your age:
        twenty
        Please enter a number for your age.
        Enter your age:
        20
        Select a new password(letters and numbers only):
        tr4sh&
        Passwords can only have letters and numbers.
        Select a new password(letters and numbers only):
        tr4sh

    The startswith() and endswith() methods:
        >>> 'Hello, world!'.startswith('Hello')
        True
        >>> 'Hello, world!'.endswith('world!')
        True
        >>> 'abc123'.startswith('abcdef')
        False
        >>> 'abc123'.endswith('12')
        False
        >>> 'Hello, world!'.startswith('Hello, world!')
        True
        >>> 'Hello, world!'.endswith('Hello, world!')
        True

    The join() and split() methods:
        >>> ','.join(['cats', 'rats', 'bats'])
        'cats,rats,bats'
        >>> ''.join(['My','name','is','Simon'])
        'MynameisSimon'
        >>> 'ABC'.join(['My','name','is','Simon'])
        'MyABCnameABCisABCSimon'

        >>> 'My name is Simon'.split()
        ['My', 'name', 'is', 'Simon']
        >>> 'MyABCnameABCisABCSimon'.split('ABC')
        ['My', 'name', 'is', 'Simon']
        >>> 'My name is Simon'.split('m')
        ['My na', 'e is Si', 'on']

        >>> spam = '''Dear Alice, 
        How have you been? I am fine. 
        There is a container in the fridge that is labeled "Milk Experiment." 
        Please do not drink it. 
        Sincerely, Bob'''
        >>> spam.split('\n')
        ['Dear Alice, 
        How have you been? I am fine. 
        There is a container in the fridge that is labeled "Milk Experiment." 
        Please do not drink it. 
        Sincerely, Bob']

    Splitting Strings with the partition() methods:
        >>> 'Hello, world!'.partition('w')
        ('Hello, ', 'w', 'orld!')
        >>> 'Hello, world!'.partition('world')
        ('Hello, ', 'world', '!')

        >>> 'Hello, world!'.partition('o')
        ('Hell', 'o', ', world!')

        >>> 'Hello, world!'.partition('XYZ')
        ('Hello, world!', '', '')

        >>> before, sep, after='Hello, world!'.partition(' ')
        >>> before
        'Hello,'
        >>> after
        'world!'

    Justifying Text with the rjust(), ljust(), and center() methods:
        >>> 'Hello'.rjust(10)
        '     Hello'
        >>> 'Hello'.rjust(20)
        '               Hello'
        >>> 'Hello, World'.rjust(20)
        '        Hello, World'
        >>> 'Hello'.ljust(10)
        'Hello     '

        >>> 'Hello'.rjust(20,'*')
        '***************Hello'
        >>> 'Hello'.ljust(20,'-')
        'Hello---------------'

        >>> 'Hello'.center(20)
        '       Hello        '
        >>> 'Hello'.center(20,'=')
        '=======Hello========'

        PS C:\Users\cj917\Documents\courses\csc221\hw4\part1> python picnicTable.py
        ---PICNIC ITEMS--
        sandwiches..    4
        apples......   12
        cups........    4
        cookies..... 8000
        -------PICNIC ITEMS-------
        sandwiches..........     4
        apples..............    12
        cups................     4
        cookies.............  8000

    Removing Whitespace with the strip(), rstrip(), and lstrip() methods:
        >>> spam ='  Hello, World  '
        >>> spam.strip()
        'Hello, World'
        >>> spam.lstrip()
        'Hello, World  '
        >>> spam.rstrip()
        '  Hello, World'

        >>> spam ='SpamSpamBaconSpamEggsSpamSpam'
        >>> spam.strip('ampS')
        'BaconSpamEggs'

    Numeric Values of Characters with the ord() and chr() functions:
        >>> ord('A')
        65
        >>> ord('4')
        52
        >>> ord('!')
        33
        >>> chr(65)
        'A'

        >>> ord('B')
        66
        >>> ord('A')<ord('B')
        True
        >>> chr(ord('A'))
        'A'
        >>> chr(ord('A') + 1)
        'B'
    
    Copying and Pasting Strings with the pyperclip Module:
       >>> import pyperclip
        >>> pyperclip.copy('Hello, world!')
        >>> pyperclip.paste()
        'Hello, world!' 









