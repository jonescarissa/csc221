Part 1:

    Finding Patterns of Text Without Regular Expressions
        PS C:\Users\cj917\Documents\courses\csc221\hw5\part1> python isPhoneNumber.py
        Is 415-555-4242 a phone number?
        True
        Is Moshi moshi a phone number?
        False

        PS C:\Users\cj917\Documents\courses\csc221\hw5\part1> python isPhoneNumber.py
        Phone number found:415-555-1011
        Phone number found:415-555-9999
        Done

    Finding Patterns of Text with Regular Expressions
        Creating and Matching Regex Objects:
            >>> import re
            >>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
            >>> mo = phoneNumRegex.search('My number is 415-555-4242.')
            >>> print('Phone number found:' + mo.group())
            Phone number found:415-555-4242
    
    More Pattern Matching with Regular Expressions
        Grouping with Parentheses:
            >>> phoneNumRegex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
            >>> mo = phoneNumRegex.search('My number is 415-555-4242.')
            >>> mo.group(1)
            '415'
            >>> mo.group(2)
            '555-4242'
            >>> mo.group(0)
            '415-555-4242'
            >>> mo.group()
            '415-555-4242'
            >>> mo.groups()
            ('415', '555-4242')
            >>> areaCode, mainNumber = mo.groups()
            >>> print(areaCode)
            415
            >>> print(mainNumber)
            555-4242

            >>> phoneNumRegex = re.compile(r'(\(\d\d\d\)) (\d\d\d-\d\d\d\d)')
            >>> mo = phoneNumRegex.search('My phone number is (415) 555-4242.')
            >>> mo.group(1)
            '(415)'
            >>> mo.group(2)
            '555-4242'

        Matching Multiple Groups with the Pipe:
            >>> heroRegex = re.compile (r'Batman|Tine Fey')
            >>> mo1 = heroRegex.search('Batman and Tina Fey')
            >>> mo1.group()
            'Batman'
            >>> mo2 = heroRegex.search('Tina Fey and Batman')
            >>> mo2.group()
            'Batman'

            >>> batRegex = re.compile(r'Bat(man|mobile|copter|bat)')
            >>> mo = batRegex.search('Batmobile lost a wheel')
            >>> mo.group()
            'Batmobile'
            >>> mo.group(1)
            'mobile'

        Optional Matching with the Question Mark:
            >>> batRegex = re.compile(r'Bat(wo)?man')
            >>> mo1 = batRegex.search('The Adventures of Batman')
            >>> mo1.group()
            'Batman'
            >>> mo2 = batRegex.search('The Adventures of Batwoman')
            >>> mo2.group()
            'Batwoman'

            >>> phoneRegex = re.compile(r'(\d\d\d-)?\d\d\d-\d\d\d\d')
            >>> mo1 = phoneRegex.search('My number is 415-555-4242')
            >>> mo1.group()
            '415-555-4242'
            >>> mo2 = phoneRegex.search('My number is 555-4242')
            >>> mo2.group()
            '555-4242'

        Matching Zero or More with the Star:
            >>> batRegex = re.compile(r'Bat(wo)*man')
            >>> mo1 = batRegex.search('The Adventures of Batman')
            >>> mo1.group()
            'Batman'
            >>> mo2 = batRegex.search('The Adventures of Batwoman')
            >>> mo2.group()
            'Batwoman'
            >>> mo3 = batRegex.search('The Adventures of Batwowowowoman')
            >>> mo3.group()
            'Batwowowowoman'

        Matching One or More with the Plus:
            >>> batRegex = re.compile(r'Bat(wo)+man')
            >>> mo1 = batRegex.search('The Adventures of Batwoman')
            >>> mo1.group()
            'Batwoman'
            >>> mo2 = batRegex.search('The Adventures of Batwowowowoman')
            >>> mo2.group()
            'Batwowowowoman'
            >>> mo3 = batRegex.search('The Adventures of Batman')
            >>> mo3 == None
            True 

        Matching Specific Repetitions with Braces:
            >>> haRegex = re.compile(r'(Ha){3}')
            >>> mo1 = haRegex.search('HaHaHa')
            >>> mo1.group()
            'HaHaHa'
            >>> mo2 = haRegex.search('Ha')
            >>> mo2 == None
            True

    Greedy and Non-Greedy Matching
        >>> greedyHaRegex = re.compile(r'(Ha){3,5}')
        >>> mo1 = greedyHaRegex.search('HaHaHaHaHa')
        >>> mo1.group()
        'HaHaHaHaHa'
        >>> nongreedyHaRegex = re.compile(r'(Ha){3,5}?')
        >>> mo2 = nongreedyHaRegex.search('HaHaHaHaHa')
        >>> mo2.group()
        'HaHaHa'

    The Findall() Method
        >>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
        >>> mo = phoneNumRegex.search('Cell: 415-555-9999 Work: 212-555-0000')
        >>> mo.group()
        '415-555-9999'

        >>> phoneNumRegex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d') # has no groups
        >>> phoneNumRegex.findall('Cell: 415-555-9999 Work: 212-555-0000')
        ['415-555-9999', '212-555-0000']

    Character Classes
        >>> xmasRegex = re.compile(r'\d+\s\w+')
        >>> xmasRegex.findall('12 drummers, 11 pipers, 10 lords, 9 ladies, 8 maids,
        7 swans, 6 geese, 5 rings, 4 birds, 3 hens, 2 doves, 1 partridge')
        ['12 drummers', '11 pipers', '10 lords', '9 ladies', '8 maids', 
        '7 swans', '6 geese', '5 rings', '4 birds', 
        '3 hens', '2 doves', '1 partridge']

    Making Your Own Character Classes
        >>> vowelRegex = re.compile(r'[aeiouAEIOU]')
        >>> vowelRegex.findall('RoboCop eats baby food. BABY FOOD.')
        ['o', 'o', 'o', 'e', 'a', 'a', 'o', 'o', 'A', 'O', 'O']

        >>> consonantRegex = re.compile(r'[^aeiouAEIOU]')
        >>> consonantRegex.findall('RoboCop eats baby food. BABY FOOD.')
        ['R', 'b', 'C', 'p', ' ', 't', 's', ' ', 'b', 'b', 'y', ' ', 'f', 'd',
        '.', ' ', 'B', 'B', 'Y', ' ', 'F', 'D', '.']

    The Caret and Dollar Sign Characters
        >>> beginsWithHello = re.compile(r'^Hello')
        >>> beginsWithHello.search('Hello, world!')
        <re.Match object; span=(0, 5), match='Hello'>
        >>> beginsWithHello.search('He said hello.') == None
        True 

        >>> endsWithNumber = re.compile(r'\d$')
        >>> endsWithNumber.search('Your number is 42')
        <re.Match object; span=(16, 17), match='2'>
        >>> endsWithNumber.search('Your number is forty two.') == None
        True

        >>> wholeStringIsNum = re.compile(r'^\d+$')
        >>> wholeStringIsNum.search('1234567890')
        <re.Match object; span=(0, 10), match='1234567890'>
        >>> wholeStringIsNum.search('12345xyz67890') == None
        True
        >>> wholeStringIsNum.search('12 34567890') == None
        True

    The Wildcard Character
        >>> atRegex = re.compile(r'.at')
        >>> atRegex.findall('The cat in the hat sat on the flat mat.')
        ['cat', 'hat', 'sat', 'lat', 'mat']

        Matching Everything with Dot-Star:
            >>> nameRegex = re.compile(r'First Name: (.*) Last Name: (.*)')
            >>> mo = nameRegex.search('First Name: Al Last Name: Sweigart')
            >>> mo.group(1)
            'Al'
            >>> mo.group(2)
            'Sweigart'

            >>> nongreedyRegex = re.compile(r'<.*?>')
            >>> mo = nongreedyRegex.search('<To serve man> for dinner.>')
            >>> mo.group()
            '<To serve man>'
            >>> greedyRegex = re.compile(r'<.*>')
            >>> mo = greedyRegex.search('<To serve man> for dinner.>')
            >>> mo.group()
            '<To serve man> for dinner.>'

        Matching Newlines with the Dot Character:
            >>> noNewlineRegex = re.compile('.*')
            >>> noNewlineRegex.search('Serve the public trust.
            \nProtect the innocent.\nUphold the law.').group()
            'Serve the public trust.'
            >>> newlineRegex = re.compile('.*', re.DOTALL)
            >>> newlineRegex.search('Serve the public trust.
            \nProtect the innocent.\nUphold the law.').group()
            'Serve the public trust.\nProtect the innocent.\nUphold the law.'
            
    Case-Insensitive Matching
        >>> robocop = re.compile(r'robocop',re.I)
        >>> robocop.search('RoboCop is part man, part machine, all cop.').group()
        'RoboCop'
        >>> robocop.search('ROBOCOP protects the innocent.').group()
        'ROBOCOP'
        >>> robocop.search('Al, why does your programming book talk about robocop so much?').group()
        'robocop'

    Substituting Strings with the Sub() Method
        >>> namesRegex = re.compile(r'Agent \w+')
        >>> namesRegex.sub('CENSORED', 'Agent Alice gave the secret documents to Agent Bob.')
        'CENSORED gave the secret documents to CENSORED.'

        >>> agentNamesRegex = re.compile(r'Agent(\w)\w*')
        >>> agentNamesRegex.sub(r'\1****', 'Agent Alice told Agent Carol that Agent Eve 
        knew Agent Bob was a double agent.')
        'A**** told C**** that E**** knew B**** was a double agent.'

    


    
            

        